8086/87/88/186 MACRO ASSEMBLER    MISC                                                     23:02:38  10/12/;3  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE MISC
OBJECT MODULE PLACED IN MISC.OBJ
ASSEMBLER INVOKED BY:  D:\ASM86.EXE MISC.ASM


LOC  OBJ                  LINE     SOURCE

                             1 +1  $mod186
                             2 +1  $EP
                             3     NAME MISC
                             4     ; Interrupt and misc routines for uPD70208 microcomputer system
                             5     ;
                             6     ; Filename:     MISC.ASM
                             7     ;
                             8     ; Author:       Dr Tay Teng Tiow
                             9     ; Address:      Department of Electrical Engineering 
                            10     ;               National University of Singapore
                            11     ;               10, Kent Ridge Crescent
                            12     ;               Singapore 0511. 
                            13     ; Date:         3rd November 1991
                            14     ;
                            15     ; This file contains proprietory information and cannot be copied 
                            16     ; or distributed without prior permission from the author.
                            17     ;---------------------------------------------------------------------------
                            18     
                            19     public  print_char, print_2hex, iodefine, set_timer2
                            20     extrn   serial_rec_action:far, timer2_action:far
                            21     
                            22     
----                        23     INT_VEC_SEG     SEGMENT         AT      0H
                            24     ; Define the interrupt vector locations
                            25     ; System reserved interrupts
0000                        26                     ORG     0000H
0000 ????????               27             DIV_ZERO        DD      ?       ;not defined yet
0004 ????????               28             SINGLE_STEP     DD      ?       ;not defined yet
0008 ????????               29             NMI_INPUT       DD      ?       ;start of downloaded program
000C ????????               30             BRK_3_VEC       DD      ?       ;not defined yet
0010 ????????               31             OVERFLOW        DD      ?       ;not defined yet
0014 ????????               32             ARRAY_BND       DD      ?       ;Array Bounds
0020                        33                     ORG     020H
0020 ????????               34             TIMER0_VEC      DD      ? ;route for timer 0
                            35     ; Interrupt control unit
0030                        36                     ORG     030H
0030 AE00----       R       37             INTP0           DD      SERIAL_INTR
0034 ????????               38             INTP1           DD      ?       ;external, not used yet  
0038 ????????               39             INTP2           DD      ?       ;external, not used yet
003C ????????               40             INTP3           DD      ?       ;external, not used yet
0040 ????????               41             NUMERICS        DD      ?       ;
0044 ????????               42             RSVED           DD      ?       ;system reserved 
0048 ????????               43             TIMER1_VEC      DD      ?       ;route for timer 1
004C 2901----       R       44             TIMER2_VEC      DD      TIMER2_INTR       ;Timer2 Route
                            45                ;Reserved from 050H to 080H     
0080                        46                    ORG     080H
                            47     ;Interrupt Vector addrerss from 080h (type 32) to 3fCH (type 255)
                            48     ;are avaiable for user software interrupt           
                            49     ; Software interrupts
0080 ????????               50             SOFT0           DD      ? ;TYPE 32
8086/87/88/186 MACRO ASSEMBLER    MISC                                                     23:02:38  10/12/;3  PAGE    2


LOC  OBJ                  LINE     SOURCE

0084 ????????               51             SOFT1           DD      ? ;TYPE 33
0088 ????????               52             SOFT2           DD      ?
008C ????????               53             SOFT3           DD      ?
0090 ????????               54             SOFT4           DD      ?
0094 ????????               55             SOFT5           DD      ?
0098 ????????               56             SOFT6           DD      ?
009C ????????               57             SOFT7           DD      ?
----                        58     INT_VEC_SEG     ENDS
                            59     
                            60     
                            61     
----                        62     INT_RAM_AREA    SEGMENT
  0080                      63             QUEUE_LEN       EQU     128
                            64     
0000 (128                   65             QUEUE_TRANS     DB      QUEUE_LEN DUP(?)
     ??
     )
0080 0000                   66             QUEUE_HEAD      DW      0H
0082 0000                   67             QUEUE_TAIL      DW      0H
----                        68     INT_RAM_AREA    ENDS
                            69     
                            70     
                            71 +1  $include(80188.inc)
                      =1    72     ;IO Setup for 80C188XL 
                      =1    73     ;By Zhu Shunyu
                      =1    74     
  FFA0                =1    75              UMCR    EQU    0FFA0H ; Upper Memory Control Register
  FFA2                =1    76              LMCR    EQU    0FFA2H ; Lower Memory control Register         
  FFA4                =1    77              PCSBA   EQU    0FFA4H ; Peripheral Chip Select Base Address
  FFA8                =1    78              MPCS    EQU    0FFA8H ; MMCS and PCS Alter Control Register
                      =1    79     
                      =1    80     
                      =1    81     ; Initial 80C188XL UCS Pin
                      =1    82     ; |start address|block size| value for No waits, No Ready   
                      =1    83     ;   FE000H            8K                 3E04H
                      =1    84     ;   FC000H           16K                 3C04H
                      =1    85     ;   F8000H           32K                 3804H
                      =1    86      
                      =1    87              
                      =1    88     ; Initialize Upper Chip Select pin with 8K ROM 
                      =1    89     ;         MOV DX, UMCR
                      =1    90     ;         MOV AX, 03E04H
                      =1    91     ;         OUT DX, AX
                      =1    92     
                      =1    93     ; Initialize Lower Chip Select pin with 8k RAM
                      =1    94     ;         MOV DX, LMCR
                      =1    95     ;         MOV AX, 01C4H  ; Starting address 1FFFH, 8K, No waits, last shoud be 5H for
                                    1 waits      
                      =1    96     ;         OUT DX, AL
                      =1    97     ; Initialize MPCS to MAP peripheral to IO address
0000 BAA8FF           =1    98              MOV DX, MPCS
0003 B88300           =1    99              MOV AX, 0083H
0006 EE               =1   100              OUT DX, AL
                      =1   101     ; PCSBA initial, set the serial port start from 00H
0007 BAA4FF           =1   102              MOV DX, PCSBA
8086/87/88/186 MACRO ASSEMBLER    MISC                                                     23:02:38  10/12/;3  PAGE    3


LOC  OBJ                  LINE     SOURCE

000A B80300           =1   103              MOV AX, 0003H ; Peripheral starting address 00H no READY, No Waits
000D EE               =1   104              OUT DX, AL
                      =1   105     
                      =1   106     ;Serial port definition and initialize 
  0000                =1   107              SRB     EQU       00H ; Serial Receiver Buffer Register (R)
  0000                =1   108              STB     EQU       00H ; Serial Transmitter Holding Register(W)  
  0001                =1   109              SIER    EQU       01H ; Serial Interrupte Enable Register (w)
  0002                =1   110              IIR     EQU       02H ; Interrupt Identification Register (R)
  0003                =1   111              SMD     EQU       03H ; Serial Line Control Register
  0005                =1   112              SST     EQU       05H ; Serial Line Status Register
  0000                =1   113              DLL     EQU       00H ; Divisor Latch Least Significant BYTE
  0001                =1   114              DLM     EQU       01H ; Divisor Latch most  Significant BYTE
                      =1   115     
                      =1   116     ;Definition of content of SST register
                      =1   117     ;|Not Use|TE|THRE|BI|FE|PE|OE|DR|
                      =1   118     ;TE Transmitter empty
                      =1   119     ;THRE Transmittor Holding Register Empty
                      =1   120     ;BI Breakr Interrupt
                      =1   121     ;FE Framing Error
                      =1   122     ;PE Parity Error
                      =1   123     ;OE Overrun Error 
                      =1   124     ;DR Data Ready
  0001                =1   125               REC_RDY    EQU   00000001B
  0020                =1   126               TRAN_RDY   EQU   00100000B
  000E                =1   127               ERR_DET    EQU   00001110B
  0010                =1   128               BREAK_DET  EQU   00010000B
                      =1   129     ; Serial Line Control Data
  0007                =1   130             SMD_DATA     EQU    00000111B
  0003                =1   131             S_INT_ENA    EQU    00000011B
  0000                =1   132             S_INT_DIS    EQU    00000000B
                      =1   133        
                      =1   134     ;1st bit set 1 to access the Divisor latch 
                      =1   135     ;2 stop bits, 8 data bits, no parity check
  0087                =1   136             SMD_DATA_DIV EQU    10000111B
                      =1   137     ; Set divisor value        
000E BA0300           =1   138             MOV DX, SMD
0011 B087             =1   139             MOV AL, SMD_DATA_DIV
0013 EE               =1   140             OUT DX, AL
0014 BA0000           =1   141             MOV DX, DLL
0017 B034             =1   142             MOV AL, 52
0019 EE               =1   143             OUT DX, AL
001A BA0100           =1   144             MOV DX, DLM
001D B000             =1   145             MOV AL, 0
001F EE               =1   146             OUT DX, AL
                      =1   147     ;SET SERIAL PORT WORKING MODE
0020 BA0300           =1   148              MOV DX, SMD
0023 B007             =1   149              MOV AL, SMD_DATA
0025 EE               =1   150              OUT DX, AL
                      =1   151     ;DISABLE SERIAL PORT INT
0026 BA0100           =1   152              MOV DX, SIER
0029 B000             =1   153              MOV AL, 0
002B EE               =1   154              OUT DX, AL
                      =1   155     
                      =1   156     
                      =1   157     
8086/87/88/186 MACRO ASSEMBLER    MISC                                                     23:02:38  10/12/;3  PAGE    4


LOC  OBJ                  LINE     SOURCE

                      =1   158     ; Timer control Unit
                      =1   159       
  FF66                =1   160              T2_CON    EQU      0FF66H ; Timer 2 Control Register
  FF62                =1   161              T2_CA     EQU      0FF62H ; Timer 2 compare register
  FF60                =1   162              T2_CNT    EQU      0FF60H ;
                      =1   163     
  FF5E                =1   164              T1_CON    EQU      0FF5EH ;
  FF5C                =1   165              T1_CB     EQU      0FF5CH ;
  FF5A                =1   166              T1_CA     EQU      0FF5AH ;
  FF58                =1   167              T1_CNT    EQU      0FF58H
                      =1   168              
  FF56                =1   169              T0_CON    EQU      0FF56H ;
  FF54                =1   170              T0_CB     EQU      0FF54H ;
  FF52                =1   171              T0_CA     EQU      0FF52H ;
  FF50                =1   172              TO_CNT    EQU      0FF50H   
                      =1   173              
                      =1   174     ; Timer Control Data
                      =1   175     
                      =1   176     
                      =1   177     ;Interrupt Control Registers
                      =1   178           
                      =1   179     
  FF3E                =1   180             INT3_CTRL       EQU 0FF3EH ;Interrupt 3 Control Register
  FF3C                =1   181             INT2_CTRL       EQU 0FF3CH
  FF3A                =1   182             INT1_CTRL       EQU 0FF3AH
  FF38                =1   183             INT0_CTRL       EQU 0FF38H
  FF32                =1   184             TIMER_CTRL      EQU 0FF32H ;Timer Interrupt Control Register
  FF30                =1   185             ISR             EQU 0FF30H ; Interrupt Status Register
  FF22                =1   186             EOI             EQU 0FF22H ; END OF INTERRUPT REGISTER
                      =1   187             
  FF28                =1   188             IMKW            EQU 0FF28H ; Interrupt Mask 
  FF2A                =1   189             IPMK            EQU 0FF2Ah ; Interrupt Priority Mask 
                      =1   190     
                      =1   191     ;| - | - | - | - |MSK|PM2|PM1|PM0| For TCU INT
                      =1   192     
                      =1   193     ;| - |SFNM|CAS|LVL|MSK|PM2|PM1|PM0| For TCU INT0,1
                      =1   194     
                      =1   195     ;MSK 1-enable, 0-mask int 
                      =1   196     ;pm0-pm1 Priority
                      =1   197     
                      =1   198         
                           199     
                           200     
----                       201     MISC_ROUTINE    SEGMENT
                           202     ASSUME CS:MISC_ROUTINE
                           203     
                           204     ; ---This procdeure initialize the system I/O area and on-chip devices-----
0000                       205     IODEFINE        PROC    FAR
0000 50                    206                     PUSH    AX
0001 52                    207                     PUSH    DX
                           208     
                           209     ; Initialize SCU for operation
0002 B007                  210                     MOV     AL,SMD_DATA
0004 E603                  211                     OUT     SMD,AL
                           212     ; Enable serial interrupts
8086/87/88/186 MACRO ASSEMBLER    MISC                                                     23:02:38  10/12/;3  PAGE    5


LOC  OBJ                  LINE     SOURCE

0006 B003                  213                     MOV     AL,S_INT_ENA
0008 E601                  214                     OUT     SIER,AL
                           215     ; =============== INITIALIZATION OF INTERRUPT CONTROL UNIT =============
                           216     ; Initialize ICU for operation
                           217                     
                           218     ; Mask all interrupts except SCU
                           219                     ;disable TX interrupt,ENABLE RX.
000A B001                  220                     MOV     AL,1
000C E601                  221                     OUT     SIER,AL
                           222     ; SCU use INT0, enable INT0             
000E BA38FF                223                     MOV     DX, INT0_CTRL
0011 33C0                  224                     XOR     AX,AX
0013 EE                    225                     OUT     DX,AL
                           226     ; Mask other Int
0014 FA                    227                     CLI
0015 BA28FF                228                     MOV     DX,IMKW
0018 B8EE00                229                     MOV     AX,0EEH
001B EE                    230                     OUT     DX,AL   
001C 5A                    231                     POP     DX
001D 58                    232                     POP     AX
001E CB                    233                     RET
                           234     IODEFINE        ENDP
                           235     
                           236     
                           237     
                           238     
                           239     
                           240     ; ----------------Start of procedure PRINT_2HEX ------------------------
001F                       241     PRINT_2HEX      PROC    FAR
  0000                     242             QUE_BASE        EQU     OFFSET QUEUE_TRANS
                           243     ; The byte to be printed as 2 HEX number is put into AL.
                           244     ; This procedure is then called.
001F 9A6800----     R      245                     CALL    FAR PTR CHAR2HEX
                           246     ; Result is return in AX
0024 50                    247                     PUSH    AX
0025 8AC4                  248                     MOV     AL,AH
0027 9A3300----     R      249                     CALL    FAR PTR PRINT_CHAR
002C 58                    250                     POP     AX
002D 9A3300----     R      251                     CALL    FAR PTR PRINT_CHAR
0032 CB                    252                     RET
                           253     PRINT_2HEX      ENDP
                           254     
                           255     
                           256     
                           257     
                           258     ; ---------------- Start of procedure PRINT_CHAR ------------------------
0033                       259     PRINT_CHAR      PROC    FAR
                           260     ; This procedure is called to put a character into queue for transmission
                           261     ; through the serial port. 
                           262     ; The data to be transmitted is put in AL before the procedure is called.
                           263     ; Data is put at the tail. Queue_tail is then inc to point to next loc.
                           264     ; Data is taken from the head. Queue_head is then inc to point to next data.
                           265             
0033 53                    266                     PUSH    BX                      ;Save BX        
0034 06                    267                     PUSH    ES
8086/87/88/186 MACRO ASSEMBLER    MISC                                                     23:02:38  10/12/;3  PAGE    6


LOC  OBJ                  LINE     SOURCE

                           268     
0035 50                    269                     PUSH    AX
                           270     
0036 BB----         R      271                     MOV     BX,SEG QUEUE_TAIL       ;Init segment register.
0039 8EC3                  272                     MOV     ES,BX                   ;ES now contains seg of INT_RAM_AREA
                           273     
003B E401                  274                     IN      AL,SIER                 ;disable TX interrupt.
003D 24FD                  275                     AND     AL,11111101B
003F E601                  276                     OUT     SIER,AL
                           277     
0041 58                    278                     POP     AX
0042 268B1E8200            279                     MOV     BX,ES:QUEUE_TAIL                
0047 268807                280                     MOV     ES:QUE_BASE[BX],AL      ;Put data to queue_tail.
004A 26FF068200            281                     INC     ES:QUEUE_TAIL           ;Increment queue_tail
004F 26813E82008000        282                     CMP     ES:QUEUE_TAIL,QUEUE_LEN ;and wrap around
0056 7C07                  283                     JL      L_PRINT1                ;to zero if needed.
0058 26C70682000000        284                     MOV     ES:QUEUE_TAIL,0
005F                       285     L_PRINT1:       
005F E401                  286                     IN      AL,SIER                 ;enable TX interrupt
0061 0C02                  287                     OR      AL,00000010B
0063 E601                  288                     OUT     SIER,AL
                           289     
0065 07                    290                     POP     ES
0066 5B                    291                     POP     BX
0067 CB                    292                     RET
                           293     PRINT_CHAR      ENDP
                           294     
                           295     
                           296     
                           297     
                           298     ;------------------Start of Procedure CHAR2HEX ----------------------------
0068                       299     CHAR2HEX        PROC    FAR
                           300     ; Char to be converted to HEX is put in AL before calling this procedure.
                           301     ; HEX version is return in AX.
0068 8AE0                  302                     MOV     AH,AL
006A 240F                  303                     AND     AL,00001111B
006C 3C09                  304                     CMP     AL,9
006E 7F05                  305                     JG      GT9_1
0070 0C30                  306                     OR      AL,00110000B
0072 EB0590                307                     JMP     DIGIT2
0075 2C09                  308     GT9_1:          SUB     AL,9
0077 0C40                  309                     OR      AL,01000000B
0079                       310     DIGIT2:
0079 C0EC04                311                     SHR     AH,4
007C 80FC09                312                     CMP     AH,9
007F 7F06                  313                     JG      GT9_2
0081 80CC30                314                     OR      AH,00110000B
0084 EB0790                315                     JMP     DONE
0087 80EC09                316     GT9_2:          SUB     AH,9
008A 80CC40                317                     OR      AH,01000000B
008D                       318     DONE:
008D CB                    319                     RET
                           320     CHAR2HEX        ENDP
                           321     
008E                       322     set_timer2      proc Far
8086/87/88/186 MACRO ASSEMBLER    MISC                                                     23:02:38  10/12/;3  PAGE    7


LOC  OBJ                  LINE     SOURCE

008E 50                    323             push ax
008F 52                    324             push dx
                           325             ;Initialize Timer2      
0090 B80000                326             mov ax, 0;
0093 BA60FF                327             mov dx, T2_CNT;
0096 EE                    328             OUT DX, AL
                           329     
0097 B860EA                330             MOV AX, 60000;
009A BA62FF                331             MOV DX, T2_CA;
009D EE                    332             OUT DX, AL
                           333     
009E B801E0                334             MOV AX,0E001H
00A1 BA66FF                335             MOV DX, T2_CON
00A4 EE                    336             OUT DX, AL
                           337     
00A5 BA32FF                338             MOV DX, TIMER_CTRL
00A8 B001                  339             MOV AL, 01H
00AA EE                    340             OUT DX, AL
00AB 5A                    341             pop dx
00AC 58                    342             pop ax
                           343     
00AD CB                    344     ret
                           345     set_timer2 endp
                           346     ; ************************************************************************
                           347     ;                       INTERRUPT ROUTINES                               *
                           348     ; ************************************************************************
                           349     
                           350     ; **************** Start of SERIAL_INTR service routine ******************
                           351     
                           352     ;*****************CAUTION*****************
                           353     ;At the end of interrutp routines, you must write EOI (end of Int) +
                           354     ;with the INT type (INT0-type 12) (timer-type 8)                   +    
                           355     ;comment added by Zhu Shunyu    March,2000                         +            
                                              
                           356     ;Interrupt Routines Modified accordly to fit 80C188XL
                           357     ;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
00AE                       358     SERIAL_INTR:
00AE 50                    359                     PUSH    AX                      ;save registers
00AF 53                    360                     PUSH    BX
00B0 52                    361                     PUSH    DX
                           362     
                           363            
                           364     
                           365                                    
00B1 E402                  366                     IN      AL,IIR                  ;read in serial INT ID
00B3 2407                  367                     AND     AL,00000111B
00B5 3C04                  368                     CMP     AL,00000100B            ;check if rx interrupt
00B7 740F                  369                     JE      RECEIVE_INTR
                           370     
00B9 3C02                  371                     CMP     AL,00000010B            ;check if tx interrupt
00BB 741D                  372                     JE      TRANSMIT_INTR
                           373     
                           374                     
                           375     ;RESET_INT_CTL
00BD BA22FF                376                     MOV DX, EOI
8086/87/88/186 MACRO ASSEMBLER    MISC                                                     23:02:38  10/12/;3  PAGE    8


LOC  OBJ                  LINE     SOURCE

00C0 B80C00                377                     MOV AX, 12
00C3 EE                    378                     OUT DX, AL
                           379     
00C4 5A                    380                     POP     DX
00C5 5B                    381                     POP     BX                      ;false serial interrupt
00C6 58                    382                     POP     AX
00C7 CF                    383                     IRET                            ;return
                           384     
00C8                       385     RECEIVE_INTR:   
                           386                   
00C8 E400                  387                     IN      AL,SRB  
                           388     ; Information received will be used by user routine
                           389     ; Action to be taken will be contained in SERIAL_REC_ACTION
00CA 9A0000----     E      390                     CALL    FAR PTR SERIAL_REC_ACTION
                           391                     
00CF BA22FF                392                     MOV DX, EOI
00D2 B80C00                393                     MOV AX, 12
00D5 EE                    394                     OUT DX, AL
00D6 5A                    395                     POP     DX
00D7 5B                    396                     POP     BX                      ;false serial interrupt
00D8 58                    397                     POP     AX
00D9 CF                    398                     IRET
                           399     
00DA                       400     TRANSMIT_INTR:
                           401                    
00DA 06                    402                     PUSH    ES                      ;save ES
00DB BB----         R      403                     MOV     BX,SEG QUEUE_TAIL       ;set ES to SERIAL_Q_SEG
00DE 8EC3                  404                     MOV     ES,BX
00E0 268B1E8200            405                     MOV     BX,ES:QUEUE_TAIL
00E5 263B1E8000            406                     CMP     BX,ES:QUEUE_HEAD        ;more data to be transmitted?
00EA 742B                  407                     JE      L_TX2
00EC 268B1E8000            408                     MOV     BX,ES:QUEUE_HEAD        ;get data from queue
00F1 268A07                409                     MOV     AL,ES:QUE_BASE[BX]
00F4 E600                  410                     OUT     STB,AL                  ;tx data
00F6 26FF068000            411                     INC     ES:QUEUE_HEAD           ;point to next data
00FB 26813E80008000        412                     CMP     ES:QUEUE_HEAD,QUEUE_LEN ;wrap around if necessary
0102 7C07                  413                     JL      L_TX1
0104 26C70680000000        414                     MOV     ES:QUEUE_HEAD,0
010B                       415     L_TX1:          
010B 268B1E8200            416                     MOV     BX,ES:QUEUE_TAIL
0110 263B1E8000            417                     CMP     BX,ES:QUEUE_HEAD        ;more data to be transmitted?
0115 7506                  418                     JNE     L_TX3
0117                       419     L_TX2:
0117 E401                  420                     IN      AL,SIER                 ;no more, disable TX interrupt.
0119 24FD                  421                     AND     AL,11111101B
011B E601                  422                     OUT     SIER,AL
011D                       423     L_TX3:
                           424                     
                           425     ;RESET_INT_CTL
011D BA22FF                426                     MOV DX, EOI
0120 B80C00                427                     MOV AX, 12
0123 EE                    428                     OUT DX, AL
0124 07                    429                     POP     ES                      ;restore original ES(transmit)
                           430                     
0125 5A                    431                     POP     DX 
8086/87/88/186 MACRO ASSEMBLER    MISC                                                     23:02:38  10/12/;3  PAGE    9


LOC  OBJ                  LINE     SOURCE

0126 5B                    432                     POP     BX                      ;return serial interrupt
0127 58                    433                     POP     AX
0128 CF                    434                     IRET
                           435     ; **************** End of SERIAL_INTR service routine ************************
                           436     
                           437     
                           438     
                           439     ; **************** Start of TIMER0_INTR service routine ******************
0129                       440     TIMER2_INTR:
0129 50                    441                     PUSH    AX
                           442                     
                           443     ; Action to be taken on timer0 interrupt to be written by user
012A 9A0000----     E      444                     CALL    FAR PTR TIMER2_ACTION
                           445                   
012F 58                    446                     POP     AX              ;return interrupt
                           447                     ;RESET_INT_CTL
0130 BA22FF                448                     MOV DX, EOI
0133 B80800                449                     MOV AX, 8
0136 EE                    450                     OUT DX, AL
0137 CF                    451                     IRET
                           452     ; **************** End of TIMER2_INTR service routine ************************
                           453     
----                       454     MISC_ROUTINE    ENDS
                           455     
                           456     END

ASSEMBLY COMPLETE, NO ERRORS FOUND
