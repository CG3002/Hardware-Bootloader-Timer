$MOD186
$EP
NAME TIMER
; Main program for uPD70208 microcomputer system
;
; Author: 	Dr Tay Teng Tiow
; Address:     	Department of Electrical Engineering 
;         	National University of Singapore
;		10, Kent Ridge Crescent
;		Singapore 0511.	
; Date:   	6th September 1991
;
; This file contains proprietory information and cannot be copied 
; or distributed without prior permission from the author.
; =========================================================================

public	serial_rec_action, timer2_action
extrn	print_char:far, print_2hex:far, iodefine:far
extrn   set_timer2:far

;IO Setup for 80C188 
	UMCR    EQU    0FFA0H ; Upper Memory Control Register
	LMCR    EQU    0FFA2H ; Lower Memory control Register         
	PCSBA   EQU    0FFA4H ; Peripheral Chip Select Base Address
	MPCS    EQU    0FFA8H ; MMCS and PCS Alter Control Register
	A_8255  EQU    0080H
	B_8255  EQU    0081H
	C_8255  EQU    0082H
	CWR_8255  EQU    0083H
	INT0CON  EQU   0FF38H
	EOI EQU 0FF22H
	IMASK EQU 0FF28H
	MMCS	EQU    0FFA6H 
	DAC EQU 4000H


STACK_SEG	SEGMENT
		DB	512 DUP(?)
	TOS	LABEL	WORD
STACK_SEG	ENDS


DATA_SEG	SEGMENT
	TIMER0_MESS		DB	10,13,'TIMER2 INTERRUPT    '
	T_COUNT			DB	24
	T_COUNT_SET		DB	24
	REC_MESS		DB	10,13,'Period of timer0 =     '
	MESSAGE     	DB  32 dup('h')
	KEYPAD_INPUT 	DB  0,0,0,0,0,0,0,0
	BCD_MESSAGE 	DB  '-','-','-','-','-','-'
	ENABLE_BYTE 	DB  11111110b
	BCD_INDEX   	DB  0
	KEYPAD_INDEX 	DW 	0
	M_SIZE			DB  32
	DAC_BASE    	DW  4000H
	DAC_ADDR    	DB  15 dup(0) 
	DAC_LEN     	DB  0
	SI_PTR      	DW  0
	CHAR			DB  ?
	REG_AL			DB  ?
	REG_BH			DB  ?
	REG_CL			DB  ?
	FLAG        	DB  0
	LONG_PRESS_FLAG DB 	0
	MY_ID			DB	'r1'
	ID_FLAG_@		DB	0
	ID_FLAG_r		DB	0
	REPLY_MESSAGE	DB	'@r1/'
	FAIL_MESSAGE 	DB '@0/'
	REPLY_COUNT		DB	4
	FAIL_COUNT		DB	3
	REPLY_FLAG		DB 	0
	SEND_FLAG   	DB  0
	SEND_BUFFER 	DB  13 dup(0)
	SEND_BUFFER_LEN DW 	0
	MAX_INPUT_SIZE 	DW 	0
	QTY_FLAG 		DW 	0
	RECEIVE_FLAG 	DW 	0
	DAC_FLAG 		DW 	0
	PRICE_FLAG   	DW 	0
	DECIMAL_FLAG 	DW 	1
	SCROLL_LEN   	DW 	0
	DAC_DISABLE     DW  0
	DECIMAL_INDEX   DW  3
	LANG_FLAG     	DW  1
	PRICE			DW	0
	QTY				DW	0
	TOTAL_PRICE_U	DW	0
	TOTAL_PRICE_L	DW	0
	TOTAL_PRICE_DEC	DW	0
	TEMP_BCD_ARR    DB  8 dup(0)
	THOUSAND_FLAG   DW  0
	CENT_FLAG		DW	0
DATA_SEG	ENDS


CODE_SEG	SEGMENT

	PUBLIC		START

ASSUME	CS:CODE_SEG, SS:STACK_SEG

START:
;initialize stack area
		MOV	AX,STACK_SEG		
		MOV	SS,AX
		MOV	SP,TOS
		
; Initialize the on-chip pheripherals
		CALL	FAR PTR	IODEFINE
		
call set_timer2
               STI

; ^^^^^^^^^^^^^^^^^  Start of User Main Routine  ^^^^^^^^^^^^^^^^^^

;Initialize MMCS
	
	MOV DX, MMCS
	MOV AX, 4003H
	OUT DX, AX

; Initialize MPCS to MAP peripheral to IO address
	
	MOV DX, MPCS
	MOV AX, 2083H
	OUT DX, AX
   
; PCSBA initial, set the parallel port start from 00H
	MOV DX, PCSBA
	MOV AX, 0003H ; Peripheral starting address 00H no READY, No Waits
	OUT DX, AX

; Initialize LMCS 
    MOV DX, LMCR
    MOV AX, 01C4H  ; Starting address 1FFFH, 8K, No waits, last shoud be 5H for 1 waits      
    OUT DX, AX
	
	MOV AX, DATA_SEG
	MOV DS, AX
			 
	MOV DX, CWR_8255
	MOV AX, 0082h
	OUT DX, AX
	
NEXT:
	CALL FAR PTR KEYPAD_LOOP
	
JMP NEXT

KEYPAD_LOOP PROC FAR
PUSH AX
PUSH BX
PUSH CX
PUSH DX
	
			CALL FAR PTR DEBOUNCE		
			
WAIT_1: 	MOV DS:REG_AL, 03H
		    MOV BX, 0000H
		    MOV DX,C_8255
		    MOV AL,BL
		    OUT DX,AL
		   
		    MOV DX,B_8255
		    IN AL,DX
		    MOV BL,AL  
		    AND BL,0FCH
		    CMP BL,0FCH
		 
        	JE LONG_PRESS
			
		    MOV BL, 0FEH
		    MOV DS:REG_BH, 04H
		   
NXTROW: 
	        ROL BL,07H
			MOV CH,BL
			MOV DX,C_8255
			MOV AL,BL
			OUT DX,AL
			
			MOV DX,B_8255
			IN AL,DX
			MOV BL,AL
			AND BL,0FCH
			MOV DS:REG_CL,06H
			RCR BL,02H
NXTCOL: 	RCR BL,01H
			JNC CODEKY
			DEC DS:REG_AL
			DEC DS:REG_CL
			CMP DS:REG_CL,03H
			JE KEYPAD3
			
			CMP DS:REG_CL, 0H
			JE SUBTRACT2
			JMP NXTCOL
			
			MOV BL,CH
			DEC DS:REG_BH
			JNZ NXTROW
			JMP WAIT_1
			
LONG_PRESS:
			MOV DS:LONG_PRESS_FLAG, 0
			JMP RETURN2
CODEKY:
		    CMP DS:REG_AL, 11
			JNE bcd_upd
			MOV DS:REG_AL, 0
			
bcd_upd:
			CMP DS:LONG_PRESS_FLAG, 0
			JNE RETURN2
			
			CMP DS:REG_AL, 10
			JNE BACKSPACE
			CALL FAR PTR BCD_CLEAR
			JMP UPDATE_7SEG2
			
BACKSPACE:	CMP DS:REG_AL, 12
			JNE ENTER_DATA
			CALL FAR PTR BCD_BACKSPACE
			JMP UPDATE_7SEG2

ENTER_DATA:	CMP DS:REG_AL, 13
			JNE END_TRANS
			CALL FAR PTR BCD_CLEAR
			MOV DS:DECIMAL_INDEX, 6
			MOV DS:MAX_INPUT_SIZE, 8
			MOV DS:LANG_FLAG, 0
			JMP UPDATE_7SEG2

SUBTRACT2:   JMP SUBTRACT

KEYPAD3: 	JMP KEYPAD_2

RETURN2:    JMP RETURN
			
END_TRANS:	CMP DS:REG_AL, 16
			JNE SCROLL_LEFT
			MOV BX, 0
			MOV DS:SEND_BUFFER[BX], '$'
			INC BX
			MOV DS:SEND_BUFFER[BX], '/'
			MOV DS:SEND_BUFFER_LEN, 2
			MOV DS:SEND_FLAG, 1
			MOV DS:TOTAL_PRICE_DEC, 0
			MOV DS:TOTAL_PRICE_L, 0
			MOV DS:TOTAL_PRICE_U, 0
			JMP UPDATE_7SEG2
			
			
SCROLL_LEFT:
			CMP DS:REG_AL, 21
			JNE SCROLL_RIGHT
			CMP DS:KEYPAD_INDEX, 6
			JLE UPDATE_7SEG2
			CMP DS:SCROLL_LEN, 0
			JE UPDATE_7SEG2
			DEC DS:SCROLL_LEN
			DEC DS:DECIMAL_INDEX
			DEC DS:KEYPAD_INDEX
			MOV BX, DS:KEYPAD_INDEX
			MOV AL, DS:KEYPAD_INPUT[BX]
			MOV DS:REG_AL, AL
			MOV DS:DAC_DISABLE, 1
			CALL FAR PTR BCD_UPDATE
			MOV DS:DAC_DISABLE, 0
			MOV DS:REG_AL, 21
			JMP UPDATE_7SEG2



SCROLL_RIGHT:
			CMP DS:REG_AL, 19
			JNE LANG_TOGGLE
			CMP DS:KEYPAD_INDEX, 6
			JLE UPDATE_7SEG2
			MOV AX, DS:KEYPAD_INDEX
			SUB AX, 6
			CMP DS:SCROLL_LEN, AX
			JE UPDATE_7SEG2
			INC DS:SCROLL_LEN
			INC DS:DECIMAL_INDEX
			DEC DS:KEYPAD_INDEX
			MOV BX, DS:KEYPAD_INDEX
			MOV AL, DS:KEYPAD_INPUT[BX]
			MOV DS:REG_AL, AL
			MOV DS:DAC_DISABLE, 1
			CALL FAR PTR BCD_UPDATE
			MOV DS:DAC_DISABLE, 0
			MOV DS:REG_AL, 19
			JMP UPDATE_7SEG2
			
UPDATE_7SEG2: JMP UPDATE_7SEG

LANG_TOGGLE:
			CMP DS:REG_AL, 18
			JNE QTY_PROMPT
			CMP DS:LANG_FLAG, 1
			JNE UPDATE_7SEG2
			MOV AX, DS:DAC_BASE
			CMP AX, 4000H
			JE MANDRIN
			MOV AX, 4000H
			JMP SEND_TOGGLE
	MANDRIN:
			MOV AX, 6300H
	SEND_TOGGLE:
			MOV DS:DAC_BASE, AX
			JMP UPDATE_7SEG
QTY_PROMPT:
			CMP DS:REG_AL, 22
			JNE QUANTITY
			CMP DS:KEYPAD_INDEX, 8
			JNE  QUANTITY
			; CMP DS:MAX_INPUT_SIZE, 8
			; JNE QUANTITY
			CALL FAR PTR UPDATE_SEND_BUFFER
			CALL FAR PTR BCD_CLEAR
			MOV DS:MAX_INPUT_SIZE, 2
			MOV DS:QTY_FLAG, 1
			JMP UPDATE_7SEG
		
QUANTITY:
			CMP DS:KEYPAD_INDEX, 0
			JE  UPDATE_7SEG
			
			CMP DS:REG_AL, 14
			JNE UPDATE_7SEG
			
			CMP DS:QTY_FLAG, 1
			JNE UPDATE_7SEG
			
			CALL FAR PTR UPDATE_THE_QUANTITY
					
			MOV DS:SEND_FLAG, 1
			
			MOV DS:QTY_FLAG, 0
			CALL FAR PTR BCD_CLEAR
			JMP UPDATE_7SEG
			

UPDATE_7SEG:
			CMP DS:REG_AL, 9
			JG SET_PRESS_FLAG
			
			CALL FAR PTR BCD_UPDATE
			
SET_PRESS_FLAG:
			MOV DS:LONG_PRESS_FLAG, 1
			JMP RETURN
	
KEYPAD_2: 
     	    ADD DS:REG_AL,0FH
			JMP NXTCOL
ZERO_PRINT: MOV DS:REG_AL,00H
			JMP NXTCOL
SUBTRACT:   SUB DS:REG_AL,06H
			MOV BL,CH
			DEC DS:REG_BH
			JMP NXTROW
	
	
RETURN:
			POP DX
			POP CX
			POP BX
			POP AX
			RET

KEYPAD_LOOP ENDP

UPDATE_THE_QUANTITY PROC FAR
PUSH AX
PUSH BX
PUSH CX
PUSH DX
	MOV CX, DS:KEYPAD_INDEX
	MOV BX, 0
	MOV DX, 0
	UPD_QTY:
		MOV AX, DS:QTY
		PUSH BX
		MOV BX, 10
		MUL BX
		POP BX
		MOV DL, DS:KEYPAD_INPUT[BX]
		ADD AX, DX
		MOV DS:QTY, AX
		INC BX
	LOOP UPD_QTY
	
	MOV CX, DS:KEYPAD_INDEX
	MOV BX, DS:SEND_BUFFER_LEN
	
	UPD_BUFFER:
		PUSH BX
		MOV BX, DS:KEYPAD_INDEX
		SUB BX, CX
		MOV AL, DS:KEYPAD_INPUT[BX]
		POP BX
		ADD AL, 30H
		MOV DS:SEND_BUFFER[BX], AL
		
		INC BX
		INC DS:SEND_BUFFER_LEN
	LOOP UPD_BUFFER
	
	MOV DS:SEND_BUFFER[BX], '/'
	INC DS:SEND_BUFFER_LEN
		
POP DX
POP CX
POP BX
POP AX

RET
UPDATE_THE_QUANTITY ENDP

UPDATE_SEND_BUFFER PROC FAR
PUSH AX
PUSH BX
PUSH CX
PUSH DX

	MOV CX, DS:KEYPAD_INDEX
	CMP CX, 0
	JE END_UPD_BUFFER
	ADD CX, 2
	MOV DS:SEND_BUFFER_LEN, CX
	MOV BX, 0
	BUFFER_LOOP:
		CMP BX, 0
		JNE ASTERISK
		MOV DS:SEND_BUFFER[BX], '~'
		JMP END_BUFFER
	ASTERISK:
		MOV AX, DS:KEYPAD_INDEX
		INC AX
		CMP BX, AX
		JNE CONT
		MOV DS:SEND_BUFFER[BX], '*'
		JMP END_BUFFER
	CONT:
		DEC BX
		MOV AL, DS:KEYPAD_INPUT[BX]
		ADD AL, 30H
		INC BX
		MOV DS:SEND_BUFFER[BX], AL
		
	END_BUFFER:
		INC BX
	LOOP BUFFER_LOOP
END_UPD_BUFFER:
POP DX
POP CX
POP BX
POP AX
RET
UPDATE_SEND_BUFFER ENDP

BCD_BACKSPACE PROC FAR

PUSH AX
PUSH BX
PUSH CX
PUSH DX

	MOV DL, DS:REG_AL
	CMP DS:KEYPAD_INDEX, 0
	JE RETURN_BACK
	
	MOV BX, 6
	BCD_CLEAR_LOOP:
		DEC BX
		MOV DS:BCD_MESSAGE[BX], '-'
		INC BX
		DEC BX
	JNZ BCD_CLEAR_LOOP
	
	CMP DS:KEYPAD_INDEX, 1
	JLE less_than_two
	
	DEC DS:KEYPAD_INDEX
	DEC DS:KEYPAD_INDEX
	MOV BX, DS:KEYPAD_INDEX
	MOV AL, DS:KEYPAD_INPUT[BX]
	MOV DS:REG_AL, AL
	MOV DS:SCROLL_LEN, 0
	MOV DS:DAC_DISABLE, 1
	CALL FAR PTR BCD_UPDATE
	MOV DS:DAC_DISABLE, 0
	JMP RETURN_BACK
	
less_than_two:
	DEC DS:KEYPAD_INDEX
	MOV DS:REG_AL, '-'
	MOV DS:SCROLL_LEN, 0
	CALL FAR PTR BCD_UPDATE
	DEC DS:KEYPAD_INDEX
	
RETURN_BACK:
	MOV DS:REG_AL, DL
POP DX
POP CX
POP BX
POP AX

RET
BCD_BACKSPACE ENDP

BCD_CLEAR PROC FAR
PUSH AX
PUSH BX
PUSH CX
PUSH DX
	MOV BX, 8
	CLEAR_LOOP:
	MOV DS:KEYPAD_INPUT[BX], 0
	DEC BX
	JNZ CLEAR_LOOP
	
	MOV BX, 6
	CLEAR_LOOP2:
		DEC BX
		MOV DS:BCD_MESSAGE[BX], '-'
		INC BX
		DEC BX
	JNZ CLEAR_LOOP2

	MOV DS:KEYPAD_INDEX, 0
	MOV DS:SCROLL_LEN, 0
POP DX
POP CX
POP BX
POP AX
RET
BCD_CLEAR ENDP

BCD_UPDATE PROC FAR
PUSH AX
PUSH BX
PUSH CX
PUSH DX
		MOV AX, DS:MAX_INPUT_SIZE
		CMP DS:KEYPAD_INDEX, AX
		JGE BCD_RET
		
		MOV CL, DS:REG_AL
		CMP CL, 9
		JG SKIP_PAST
		CMP DS:DAC_DISABLE, 1
		JE SKIP_PAST
		CALL FAR PTR DAC_UPDATE

SKIP_PAST:		
		MOV CL, DS:REG_AL

		MOV BX, DS:KEYPAD_INDEX
			
		MOV DS:KEYPAD_INPUT[BX], CL
			
		INC DS:KEYPAD_INDEX
			
		MOV BX, DS:KEYPAD_INDEX
		
		MOV AX, DS:SCROLL_LEN
		SUB BX, AX
		
		MOV DX, DS:KEYPAD_INDEX
		CMP DX, 6
		JLE update_display
		MOV DX, 6
		
	update_display:
	
		MOV CX, 5
		DEC BX
		MOV AL, DS:KEYPAD_INPUT[BX]
		INC BX
			
		PUSH DX
		MOV DX, DS:KEYPAD_INDEX
		SUB DX, DS:SCROLL_LEN
		
		SUB DX, BX
			
		PUSH BX
			
		SUB CX, DX
		MOV BX, CX
		MOV DS:BCD_MESSAGE[BX], AL
			
		POP BX
		POP DX
	
		DEC BX
		DEC DX
	JNZ update_display

	BCD_RET:
		POP DX
		POP CX
		POP BX
		POP AX
RET
BCD_UPDATE ENDP

DAC_UPDATE PROC FAR
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX
	
	MOV BX, 0
	MOV BL, DS:DAC_LEN
	MOV AL, DS:REG_AL
	
	MOV DS:DAC_ADDR[BX], AL
	
	INC DS:DAC_LEN

	POP DX
	POP CX
	POP BX
	POP AX
RET
DAC_UPDATE ENDP
	  
DEBOUNCE PROC FAR
		  PUSH CX
		  
		  MOV CX, 094CH
BACK: 	  NOP
		  LOOP BACK
		  POP CX
		  RET
DEBOUNCE  ENDP

SEND_INPUT PROC FAR
PUSH AX
PUSH BX
PUSH CX
PUSH DX
	MOV BX, 0
	MOV CX, DS:SEND_BUFFER_LEN
	
	S_BUFF:
		MOV AL, DS:SEND_BUFFER[BX]
		CALL FAR PTR PRINT_CHAR
		INC BX
	LOOP S_BUFF
	
SEND_INPUT_END:
POP DX
POP CX
POP BX
POP AX
RET
SEND_INPUT ENDP

CALC_UPD_PRICE PROC FAR
PUSH AX
PUSH BX
PUSH CX
PUSH DX
	CMP DS:QTY, 0
	JNE START_CALC
	JMP CALC_END
START_CALC:
	MOV DX, 0
	MOV AX, DS:PRICE
	MOV BX, DS:QTY
	MUL BX
	
	MOV BX, 100
	DIV BX
	MOV DS:PRICE, AX
	MOV AX, DS:TOTAL_PRICE_DEC
	ADD AX, DX
	CMP AX, 100
	JL NON_DECIMAL
	INC DS:TOTAL_PRICE_L
	SUB AX, 100
	
NON_DECIMAL:	
	MOV DS:TOTAL_PRICE_DEC, AX
	MOV AX, DS:TOTAL_PRICE_L
	MOV BX, DS:PRICE
	ADD AX, BX
	JNC update_normal
	INC DS:TOTAL_PRICE_U
	
update_normal:
	MOV DS:TOTAL_PRICE_L, AX
	
	MOV DX, 0
	CMP DS:TOTAL_PRICE_DEC, 9
	JG DECIMAL_CONT
	MOV CX, 10
	MOV AX, DS:TOTAL_PRICE_DEC
	MUL CX
	MOV DS:TOTAL_PRICE_DEC, AX
DECIMAL_CONT:
	MOV AX, DS:TOTAL_PRICE_DEC
	MOV CX, 10
	DIV CX
	
	MOV BX, 7
	MOV DS:TEMP_BCD_ARR[BX], DL
	DEC BX
	MOV DS:TEMP_BCD_ARR[BX], AL
	
	MOV BX, 6
	MOV AX, DS:TOTAL_PRICE_L
	
	TEMP_UPD_LOOP:
		MOV DX, 0
		MOV CX, 10
		DIV CX
		
		DEC BX
		MOV DS:TEMP_BCD_ARR[BX], DL
		INC BX
		
		DEC BX
		
	JNZ TEMP_UPD_LOOP
	
	MOV CX, DS:TOTAL_PRICE_U
	CMP CX, 0
	JE upd_dac_part
	ADD_EXTRA_PART:
		MOV BX, 5
		MOV AL, DS:TEMP_BCD_ARR[BX]
		ADD AL, 6
		CMP AL, 9
		JLE CONT_DIGIT_1
		SUB AL, 10
		DEC BX
		INC DS:TEMP_BCD_ARR[BX]
		INC BX
	CONT_DIGIT_1:
		MOV DS:TEMP_BCD_ARR[BX], AL
		DEC BX
		
		MOV AL, DS:TEMP_BCD_ARR[BX]
		ADD AL, 3
		CMP AL, 9
		JLE CONT_DIGIT_2
		SUB AL, 10
		DEC BX
		INC DS:TEMP_BCD_ARR[BX]
		INC BX
	CONT_DIGIT_2:
		MOV DS:TEMP_BCD_ARR[BX], AL
		DEC BX
		
		MOV AL, DS:TEMP_BCD_ARR[BX]
		ADD AL, 5
		CMP AL, 9
		JLE CONT_DIGIT_3
		SUB AL, 10
		DEC BX
		INC DS:TEMP_BCD_ARR[BX]
		INC BX
	CONT_DIGIT_3:
		MOV DS:TEMP_BCD_ARR[BX], AL
		DEC BX
		
		
		MOV AL, DS:TEMP_BCD_ARR[BX]
		ADD AL, 5
		CMP AL, 9
		JLE CONT_DIGIT_4
		SUB AL, 10
		DEC BX
		INC DS:TEMP_BCD_ARR[BX]
		INC BX
	CONT_DIGIT_4:
		MOV DS:TEMP_BCD_ARR[BX], AL
		DEC BX
		
		MOV AL, DS:TEMP_BCD_ARR[BX]
		ADD AL, 6
		CMP AL, 9
		JLE CONT_DIGIT_5
		SUB AL, 10
		DEC BX
		INC DS:TEMP_BCD_ARR[BX]
		INC BX
	CONT_DIGIT_5:
		MOV DS:TEMP_BCD_ARR[BX], AL
		DEC BX
		
	LOOP ADD_EXTRA_PART
	
upd_dac_part:

	CMP DS:DAC_BASE, 4000H
	JE ENGLISH_DAC
	JMP MANDARIN_DAC
	
ENGLISH_DAC:
	MOV DS:CENT_FLAG, 0
	MOV DS:THOUSAND_FLAG, 0
	MOV BX, 0
	MOV AL, DS:TEMP_BCD_ARR[BX]
	MOV DS:REG_AL, AL
	CMP AL, 0
	JE NEXT_PLACE
	CALL FAR PTR DAC_UPDATE
	MOV DS:REG_AL, 28
	CALL FAR PTR DAC_UPDATE
	
NEXT_PLACE:	
	INC BX
	MOV AL, DS:TEMP_BCD_ARR[BX]
	CMP AL, 1
	JNE NOT_1
	INC BX
	MOV AL, DS:TEMP_BCD_ARR[BX]
	ADD AL, 10
	MOV DS:REG_AL, AL
	CALL FAR PTR DAC_UPDATE
	JMP HUNDREDS_PLACE
NOT_1:
	CMP AL, 0
	JE NEXT_PLACE_1
	MOV DS:THOUSAND_FLAG, 1
	ADD AL, 18
	MOV DS:REG_AL, AL
	CALL FAR PTR DAC_UPDATE
NEXT_PLACE_1:
	INC BX
	MOV AL, DS:TEMP_BCD_ARR[BX]
	CMP AL, 0
	JE HUNDREDS_PLACE
	MOV DS:THOUSAND_FLAG, 1
	MOV DS:REG_AL, AL
	CALL FAR PTR DAC_UPDATE

HUNDREDS_PLACE:
	CMP DS:THOUSAND_FLAG, 0
	JE NEXT_PLACE_2
	MOV DS:REG_AL, 29
	CALL FAR PTR DAC_UPDATE
	MOV DS:THOUSAND_FLAG, 0
	
NEXT_PLACE_2:
	INC BX
	MOV AL, DS:TEMP_BCD_ARR[BX]
	CMP AL, 0
	JE NEXT_PLACE_3
	MOV DS:REG_AL, AL
	CALL FAR PTR DAC_UPDATE
	MOV DS:REG_AL, 28
	CALL FAR PTR DAC_UPDATE
	
NEXT_PLACE_3:	
	INC BX
	MOV AL, DS:TEMP_BCD_ARR[BX]
	CMP AL, 1
	JNE NOT_1_2
	INC BX
	MOV AL, DS:TEMP_BCD_ARR[BX]
	ADD AL, 10
	MOV DS:REG_AL, AL
	CALL FAR PTR DAC_UPDATE
	JMP DECIMAL_DAC
NOT_1_2:
	CMP AL, 0
	JE NEXT_PLACE_4
	ADD AL, 18
	MOV DS:REG_AL, AL
	CALL FAR PTR DAC_UPDATE
NEXT_PLACE_4:
	INC BX
	MOV AL, DS:TEMP_BCD_ARR[BX]
	CMP AL, 0
	JE DECIMAL_DAC
	MOV DS:REG_AL, AL
	CALL FAR PTR DAC_UPDATE
	
DECIMAL_DAC:
	MOV DS:REG_AL, 30
	CALL FAR PTR DAC_UPDATE
	
	INC BX
	MOV AL, DS:TEMP_BCD_ARR[BX]
	CMP AL, 1
	JNE NOT_1_3
	INC BX
	MOV DS:CENT_FLAG, 1
	MOV AL, DS:TEMP_BCD_ARR[BX]
	ADD AL, 10
	MOV DS:REG_AL, AL
	CALL FAR PTR DAC_UPDATE
	JMP ENGLISH_END
	
NOT_1_3:
	CMP AL, 0
	JE NEXT_PLACE_5
	MOV DS:CENT_FLAG, 1
	ADD AL, 18
	MOV DS:REG_AL, AL
	CALL FAR PTR DAC_UPDATE
	
NEXT_PLACE_5:
	INC BX
	MOV AL, DS:TEMP_BCD_ARR[BX]
	CMP AL, 0
	JE ENGLISH_END
	MOV DS:CENT_FLAG, 1
	MOV DS:REG_AL, AL
	CALL FAR PTR DAC_UPDATE
	
ENGLISH_END:
	CMP DS:CENT_FLAG, 0
	JE ENGLISH_END2
	MOV DS:REG_AL, 31
	CALL FAR PTR DAC_UPDATE
	MOV DS:CENT_FLAG, 0
ENGLISH_END2:
	JMP CONT_BCD_UPD_1
	
MANDARIN_DAC:
	MOV DS:CENT_FLAG, 0
	MOV DS:THOUSAND_FLAG, 0
	MOV BX, 0
	MOV AL, DS:TEMP_BCD_ARR[BX]
	CMP AL, 0
	JE NEXT_PLACE_6
	MOV DS:THOUSAND_FLAG, 1
	MOV DS:REG_AL, AL
	CALL FAR PTR DAC_UPDATE
	MOV DS:REG_AL, 11
	CALL FAR PTR DAC_UPDATE
	
NEXT_PLACE_6:
	INC BX
	MOV AL, DS:TEMP_BCD_ARR[BX]
	CMP AL, 0
	JE NEXT_PLACE_7
	MOV DS:THOUSAND_FLAG, 1
	MOV DS:REG_AL, AL
	CALL FAR PTR DAC_UPDATE
	MOV DS:REG_AL, 10
	CALL FAR PTR DAC_UPDATE
	
NEXT_PLACE_7:
	INC BX
	MOV AL, DS:TEMP_BCD_ARR[BX]
	CMP AL, 0
	JE NEXT_PLACE_8
	MOV DS:THOUSAND_FLAG, 1
	MOV DS:REG_AL, AL
	CALL FAR PTR DAC_UPDATE

NEXT_PLACE_8:
	CMP DS:THOUSAND_FLAG, 0
	JE IGNORE_THOUSAND
	MOV DS:REG_AL, 12
	CALL FAR PTR DAC_UPDATE
	MOV DS:THOUSAND_FLAG, 0
	
IGNORE_THOUSAND:
	INC BX
	MOV AL, DS:TEMP_BCD_ARR[BX]
	CMP AL, 0
	JE NEXT_PLACE_9
	MOV DS:REG_AL, AL
	CALL FAR PTR DAC_UPDATE
	MOV DS:REG_AL, 11
	CALL FAR PTR DAC_UPDATE
	
NEXT_PLACE_9:
	INC BX
	MOV AL, DS:TEMP_BCD_ARR[BX]
	CMP AL, 0
	JE NEXT_PLACE_10
	MOV DS:REG_AL, AL
	CALL FAR PTR DAC_UPDATE
	MOV DS:REG_AL, 10
	CALL FAR PTR DAC_UPDATE
	
NEXT_PLACE_10:
	INC BX
	MOV AL, DS:TEMP_BCD_ARR[BX]
	CMP AL, 0
	JE MANDARIN_DEC
	MOV DS:REG_AL, AL
	CALL FAR PTR DAC_UPDATE
	
MANDARIN_DEC:
	MOV DS:REG_AL, 13
	CALL FAR PTR DAC_UPDATE
	
	INC BX
	MOV AL, DS:TEMP_BCD_ARR[BX]
	CMP AL, 0
	JE NEXT_PLACE_11
	MOV DS:CENT_FLAG, 1
	MOV DS:REG_AL, AL
	CALL FAR PTR DAC_UPDATE
	MOV DS:REG_AL, 10
	CALL FAR PTR DAC_UPDATE
	
NEXT_PLACE_11:

	INC BX
	MOV AL, DS:TEMP_BCD_ARR[BX]
	CMP AL, 0
	JE CONT_BCD_UPD
	MOV DS:CENT_FLAG, 1
	MOV DS:REG_AL, AL
	CALL FAR PTR DAC_UPDATE
	
CONT_BCD_UPD:
	CMP DS:CENT_FLAG, 0
	JE CONT_BCD_UPD_1
	MOV DS:REG_AL, 14
	CALL FAR PTR DAC_UPDATE
	MOV DS:CENT_FLAG, 0
CONT_BCD_UPD_1:
	CALL FAR PTR BCD_CLEAR
	MOV DS:KEYPAD_INDEX, 0
	MOV DS:DECIMAL_INDEX, 3
	MOV CX, 8
	UPD_BCD:
		MOV BX, 8
		SUB BX, CX
		MOV AL, DS:TEMP_BCD_ARR[BX]
		MOV DS:REG_AL, AL
		MOV DS:DAC_DISABLE, 1
		CALL FAR PTR BCD_UPDATE
		MOV DS:DAC_DISABLE, 0
	LOOP UPD_BCD
	
	MOV DS:PRICE, 0
	MOV DS:QTY, 0
CALC_END:
POP DX
POP CX
POP BX
POP AX
RET
CALC_UPD_PRICE ENDP
; ^^^^^^^^^^^^^^^ End of User main routine ^^^^^^^^^^^^^^^^^^^^^^^^^
SERIAL_REC_ACTION	PROC	FAR
		PUSH	CX
		PUSH 	BX
		PUSH	DS
		
		MOV	BX,DATA_SEG		;initialize data segment register
		MOV	DS,BX
		
		CMP DS:REPLY_FLAG, 1
		JNE next_id1
		
		CMP DS:SEND_FLAG, 1
		JE send_input_across1
		
		CMP DS:RECEIVE_FLAG, 1
		JNE terminate_session3
		
		CMP AL, '/'
		JNE CHECK_SEND
		MOV DS:PRICE_FLAG, 0
		MOV DS:RECEIVE_FLAG, 0
		MOV DS:LANG_FLAG, 1
		CALL FAR PTR CALC_UPD_PRICE
		JMP terminate_session3
	
	CHECK_SEND:
		CMP AL, '&'
		JNE receive_price
		MOV DS:PRICE_FLAG, 1
		MOV DS:KEYPAD_INDEX, 0
		MOV DS:MAX_INPUT_SIZE, 8
		JMP id_skip2
		
	receive_price:
		CMP AL, '#'
		JNE check_price
		MOV DS:DAC_FLAG, 1
		MOV DS:PRICE_FLAG, 0
		JMP id_skip2
	
	check_price:	
	
		CMP DS:PRICE_FLAG, 1
		JE update_price_value
		
		CMP DS:DAC_FLAG, 1
		JE dac_change
		JMP id_skip2

	next_id1:
		JMP next_id
		
	send_input_across1:
		JMP send_input_across
	
	terminate_session3:
		JMP terminate_session2
	
	dac_change:
		MOV BL, DS:REG_AL
		SUB AL, 30H
		MOV DS:REG_AL, AL
		CALL FAR PTR DAC_UPDATE
		MOV DS:REG_AL, BL
		MOV DS:DAC_FLAG, 0
		JMP id_skip2
	

	id_skip3: JMP id_skip2

		
	update_price_value:
		SUB AL, 30H
		MOV CX, 0
		MOV CL, AL
		MOV AX, DS:PRICE
		MOV BX, 10
		MUL BX
		
		ADD AX, CX
		MOV DS:PRICE, AX
		JMP id_skip2
		
	send_input_across:
		CALL FAR PTR SEND_INPUT
		
		MOV DS:SEND_BUFFER_LEN, 0
		
		MOV DS:SEND_FLAG, 0
		
		MOV DS:RECEIVE_FLAG, 1
		
		JMP id_skip2
		
		terminate_session2: JMP terminate_session
		id_skip2: JMP id_skip
		
	next_id:
		
		CMP DS:ID_FLAG_r, 1
		JNE id_flag_label
		CMP DS:MY_ID[1], AL
		JNE id_skip
		;start writing to pc
		MOV DS:REPLY_FLAG, 1
		MOV DS:ID_FLAG_r, 0
		JMP id_skip
	
	id_flag_label:
	
		CMP DS:ID_FLAG_@, 1
		JNE protocol_rec
		CMP AL,'r'
		JNE id_not_r
		MOV DS:ID_FLAG_r,1
		MOV DS:ID_FLAG_@, 0
		JMP S_RET
	id_not_r:
		MOV DS:ID_FLAG_@, 0
		JMP id_skip
	
	terminate_session:
		MOV DS:ID_FLAG_r, 0
		XOR BX,BX
	start_send1:
		PUSH AX
		XOR AX,AX
		MOV AL, DS:FAIL_MESSAGE[BX]
		CALL FAR PTR PRINT_CHAR
		POP AX
		MOV DS:REPLY_FLAG, 0
		INC BX
		CMP BL, DS:FAIL_COUNT
		JNE start_send1
		
	protocol_rec:
		CMP AL,'@'
		JNE id_skip
		MOV DS:ID_FLAG_@,1
		JMP S_RET
		
	id_skip:
		JMP S_RET
	
		CMP	AL,'<'
		JNE	S_FAST

		INC	DS:T_COUNT_SET
		INC	DS:T_COUNT_SET

		JMP	S_NEXT0
S_FAST:
		CMP	AL,'>'
		JNE	S_RET

		DEC	DS:T_COUNT_SET
		DEC	DS:T_COUNT_SET

S_NEXT0:
		MOV	CX,22			;initialize counter for message
		MOV	BX,0

S_NEXT1:	MOV	AL,DS:REC_MESS[BX]	;print message
		call	FAR ptr print_char
		INC	BX
		LOOP	S_NEXT1

		MOV	AL,DS:T_COUNT_SET	;print current period of timer0
		CALL	FAR PTR PRINT_2HEX
S_RET:
		POP	DS
		POP	BX
		POP	CX
		RET
SERIAL_REC_ACTION	ENDP

TIMER2_ACTION	PROC	FAR
		PUSH	AX
		PUSH	DS
		PUSH	BX
		PUSH	CX
		PUSH 	DX
		
		
		MOV	AX,DATA_SEG
		MOV	DS,AX
	
		DEC	DS:T_COUNT
		JNZ	T_NEXT1
		MOV	AL,DS:T_COUNT_SET
		MOV	DS:T_COUNT,AL

T_NEXT0:
		MOV AL, DS:ENABLE_BYTE
		MOV DX, 180H
		OUT DX, AL
		
		XOR BX, BX
		MOV BL, DS:BCD_INDEX
		MOV AL, DS:BCD_MESSAGE[BX]
		
		CMP BX, DS:DECIMAL_INDEX
		JNE CALL_FUNC
		MOV DS:DECIMAL_FLAG, 1
CALL_FUNC:
		CALL FAR PTR BCD_TO_7SEG
		MOV DS:DECIMAL_FLAG, 0

		MOV DX, 200H
		OUT DX, AL

		INC DS:BCD_INDEX
		ROL DS:ENABLE_BYTE, 1
		CMP DS:ENABLE_BYTE, 10111111b
		JNE T_NEXT1
		MOV DS:ENABLE_BYTE, 11111110b 
		MOV DS:BCD_INDEX, 0

		
T_NEXT1:
		CMP DS:DAC_LEN, 0
		JE ISR_END
		
		
		MOV SI, DS:SI_PTR
			
		MOV BX, 0
		XOR AX, AX
		MOV AL, DS:DAC_ADDR[BX]
		
		MOV BX, 100H
		MUL BX
		
		MOV DX, DS:DAC_BASE
		ADD DX, AX
		
		PUSH DS
		MOV DS, DX
		
		MOV AX, [SI]
		
		MOV DX, 110H
		OUT DX, AL
		
		POP DS
		
		INC DS:SI_PTR
		CMP DS:SI_PTR, 1000H
		JNE ISR_END
		
		MOV DS:SI_PTR, 0
		DEC DS:DAC_LEN
		CALL FAR PTR DAC_SHIFT
		
ISR_END:
		
		POP DX
		POP	CX
		POP	BX
		POP	DS
		POP AX
		RET
TIMER2_ACTION	ENDP


DAC_SHIFT PROC FAR
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX

	XOR CX, CX
	MOV CL, DS:DAC_LEN
	CMP CL, 0
	JE END_SHIFT

	SHIFT_LOOP:

	XOR BX, BX
	MOV BL, DS:DAC_LEN
	SUB BX, CX
	INC BX
	
	XOR DX, DX
	MOV DL, DS:DAC_ADDR[BX]
	DEC BX
	MOV DS:DAC_ADDR[BX], DL

	LOOP SHIFT_LOOP
	
	END_SHIFT:
	POP DX
	POP CX
	POP BX
	POP AX
	RET
DAC_SHIFT ENDP

BCD_TO_7SEG PROC FAR

	PUSH BX
	PUSH CX
	PUSH DX
	
	CMP AL, 0
	JNE one
	CMP DS:DECIMAL_FLAG, 1
	JE decimal0
	MOV AL, 00111111b
	JMP endfunc
decimal0:
	MOV AL, 10111111b
	JMP endfunc
	
	one:
	CMP AL, 1
	JNE two
	CMP DS:DECIMAL_FLAG, 1
	JE decimal1
	MOV AL, 00000110b
	JMP endfunc
decimal1:
	MOV AL, 10000110b
	JMP endfunc
	
	two:
	CMP AL,2
	JNE three
	CMP DS:DECIMAL_FLAG, 1
	JE decimal2
	MOV AL, 01011011b
	JMP endfunc
decimal2:
	MOV AL, 11011011b
	JMP endfunc
	
	three:
	CMP AL,3
	JNE four
	CMP DS:DECIMAL_FLAG, 1
	JE decimal3
	MOV AL, 01001111b
	JMP endfunc
decimal3:
	MOV AL, 11001111b
	JMP endfunc
	
	four:
	CMP AL,4
	JNE five
	CMP DS:DECIMAL_FLAG, 1
	JE decimal4
	MOV AL, 01100110b
	JMP endfunc
decimal4:
	MOV AL, 11100110b
	JMP endfunc
	
	five:
	CMP AL,5
	JNE six
	CMP DS:DECIMAL_FLAG, 1
	JE decimal5
	MOV AL, 01101101b
	JMP endfunc
decimal5:
	MOV AL, 11101101b
	JMP endfunc
	
	six:
	CMP AL,6
	JNE seven
	CMP DS:DECIMAL_FLAG, 1
	JE decimal6
	MOV AL, 01111101b
	JMP endfunc
decimal6:
	MOV AL, 11111101b
	JMP endfunc
	
	seven:
	CMP AL,7
	JNE eight
	CMP DS:DECIMAL_FLAG, 1
	JE decimal7
	MOV AL, 00000111b
	JMP endfunc
decimal7:
	MOV AL, 10000111b
	JMP endfunc
	
	eight:
	CMP AL,8
	JNE nine
	CMP DS:DECIMAL_FLAG, 1
	JE decimal8
	MOV AL, 01111111b
	JMP endfunc
decimal8:
	MOV AL, 11111111b
	JMP endfunc
	
	nine:
	CMP AL,9
	JNE hifn
	CMP DS:DECIMAL_FLAG, 1
	JE decimal9
	MOV AL, 01101111b
	JMP endfunc
decimal9:
	MOV AL, 11101111b
	JMP endfunc
	
	hifn:
	CMP AL,'-'
	JNE endfunc
	CMP DS:DECIMAL_FLAG, 1
	JE decimal10
	MOV AL, 01000000b
	JMP endfunc
decimal10:
	MOV AL, 11000000b
	JMP endfunc
	
	endfunc:
	POP DX
	POP CX
	POP BX

RET
BCD_TO_7SEG ENDP

CODE_SEG	ENDS
END